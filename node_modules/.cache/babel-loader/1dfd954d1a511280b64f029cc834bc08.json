{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAIL } from './constants';\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\nexport const requestRobots = dispatch => ({\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  }) {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(data => dispatch({\n      type: REQUEST_ROBOTS_SUCCESS,\n      payload: data\n    })).then(error => dispatch({\n      type: REQUEST_ROBOTS_FAILED,\n      payload: error\n    }));\n  }\n\n});","map":{"version":3,"sources":["/Users/r.p./Desktop/react/Proj1_robofriends/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAIL","setSearchField","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","error","REQUEST_ROBOTS_FAILED"],"mappings":"AAAA,SAAQA,mBAAR,EACQC,sBADR,EAEQC,sBAFR,EAGQC,mBAHR,QAIO,aAJP;AAMA,OAAO,MAAMC,cAAc,GAAIC,IAAD,KAAW;AACrCC,EAAAA,IAAI,EAAEN,mBAD+B;AAErCO,EAAAA,OAAO,EAAEF;AAF4B,CAAX,CAAvB;AAKP,OAAO,MAAMG,aAAa,GAAIC,QAAD,KAAe;AACxCA,EAAAA,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEL;AAAR,GAAD,EAAkC;AACtCS,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACKC,IADL,CACUC,QAAQ,IAAGA,QAAQ,CAACC,IAAT,EADrB,EAEKF,IAFL,CAEUG,IAAI,IAAIL,QAAQ,CAAC;AAAEH,MAAAA,IAAI,EAAEJ,sBAAR;AAAgCK,MAAAA,OAAO,EAAEO;AAAzC,KAAD,CAF1B,EAGKH,IAHL,CAGUI,KAAK,IAAIN,QAAQ,CAAC;AAAEH,MAAAA,IAAI,EAAEU,qBAAR;AAA+BT,MAAAA,OAAO,EAAEQ;AAAxC,KAAD,CAH3B;AAIH;;AANuC,CAAf,CAAtB","sourcesContent":["import {CHANGE_SEARCH_FIELD,\n        REQUEST_ROBOTS_PENDING,\n        REQUEST_ROBOTS_SUCCESS,\n        REQUEST_ROBOTS_FAIL\n} from './constants'\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = (dispatch) => ({\n    dispatch({ type: REQUEST_ROBOTS_PENDING }){\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response=> response.json())\n            .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n            .then(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n    }\n    \n})"]},"metadata":{},"sourceType":"module"}